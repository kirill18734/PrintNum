const previousCodes = new Set();
const local_url_send_to_server = "http://127.0.0.1:5000/print_number";
const find_selector = "._logsWrapper_1igxv_7";
const timeout_sec = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

function isValidCode(code) {
    return /^\d{1,}-\d+$/.test(code); // –ü—Ä–∏–º–µ—Ä: 422-4352
}

function sendToServer(text) {
    fetch(local_url_send_to_server, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ text })
    })
    .then(res => res.json())
    .then(data => console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", data))
    .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞:", err));
}

function scanAndCompare() {
    const items = document.querySelectorAll('[data-testid="logItemPlace"]');
    items.forEach(item => {
        const code = item.textContent.trim();
        if (isValidCode(code) && !previousCodes.has(code)) {
            previousCodes.add(code);
            console.log("üì¶ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä:", code);
            sendToServer(code);
        }
    });
}

function start() {
    const targetNode = document.querySelector(find_selector);
    if (!targetNode) {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç ${find_selector}. –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...`);
        setTimeout(start, timeout_sec);
    } else {
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${find_selector} –Ω–∞–π–¥–µ–Ω. –°–∫—Ä–∏–ø—Ç –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω.`);
        scanAndCompare(); // —Å—Ä–∞–∑—É —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        setInterval(scanAndCompare, timeout_sec); // –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
}

start();
